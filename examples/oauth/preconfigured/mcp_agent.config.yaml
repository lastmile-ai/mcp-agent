$schema: ../../schema/mcp-agent.config.schema.json

# OAuth MCP Agent Configuration
# This configuration demonstrates how to set up OAuth authentication
# for accessing OAuth-protected MCP servers like the GitHub MCP server

execution_engine: asyncio

# Logging configuration
logger:
  type: console
  level: debug
  path: "./mcp-agent.log"
  # Enable detailed OAuth and authentication logging
  debug_oauth: true

# OpenTelemetry tracing (optional)
tracing:
  enabled: true
  service_name: "OAuth-MCP-Agent-Example"
  exporters: ["console"]

# OAuth-specific configuration
oauth:
  # Token store configuration
  token_store:
    backend: memory  # Use 'redis' for production with multiple processes
    refresh_leeway_seconds: 60  # Refresh tokens 60 seconds before expiry

  # OAuth flow timeout (5 minutes)
  flow_timeout_seconds: 300

  # Callback base URL for OAuth flows (adjust if running behind proxy)
  callback_base_url: http://localhost:8080

# MCP server configurations
mcp:
  servers:
    # GitHub MCP Server with OAuth authentication
    github:
      # Use the remote GitHub MCP server
      transport: "streamable_http"
      url: "https://api.githubcopilot.com/mcp/"

      # OAuth authentication configuration
      auth:
        oauth:
          enabled: true
          # Required scopes for GitHub MCP server functionality
          scopes:
            - "read:org"        # Required for search_orgs tool
            - "public_repo"     # Access to public repositories
            - "user:email"      # User information access

          # GitHub OAuth endpoints
          authorization_server: "https://github.com/login/oauth"
          resource: "https://api.githubcopilot.com/mcp"

          # Use internal callback handling (recommended)
          use_internal_callback: true

    # Example: Additional MCP server (filesystem for local operations)
    filesystem:
      command: "npx"
      args: ["-y", "@modelcontextprotocol/server-filesystem", "."]
      # No auth required for local filesystem server

    # Example: Fetch server (no auth required)
    fetch:
      command: "uvx"
      args: ["mcp-server-fetch"]

# Authorization server configuration (if exposing this agent as an MCP server)
authorization:
  enabled: false  # Set to true if you want to expose this agent with OAuth protection
  # issuer_url: "https://your-oauth-provider.com"
  # resource_server_url: "https://your-agent-server.com"
  # required_scopes: ["agent:read", "agent:execute"]

# Model configuration (for LLM-based agents)
openai:
  # API keys are stored in mcp_agent.secrets.yaml
  model: "gpt-4"
  temperature: 0.1
  max_tokens: 2000

anthropic:
  # API keys are stored in mcp_agent.secrets.yaml
  model: "claude-3-sonnet-20240229"
  max_tokens: 2000

# Agent-specific settings
agents:
  # Configuration for the GitHubOrganizationAnalyzer agent
  default_timeout: 30
  max_retries: 3

  # GitHub-specific settings
  github:
    max_orgs_per_query: 10
    default_search_sort: "best-match"
    include_detailed_analysis: true

# Workflow configuration
workflows:
  # Default workflow timeout (30 minutes)
  default_timeout_minutes: 30

  # Enable workflow pre-authorization
  enable_pre_auth: true

  # Workflow-specific settings
  github_analysis:
    max_concurrent_searches: 5
    analysis_depth: "detailed"  # "basic" or "detailed"
